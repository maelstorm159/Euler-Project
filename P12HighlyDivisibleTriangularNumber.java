package EulerProject1To50;

import java.util.ArrayList;
import java.util.List;

//The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//1, 3,6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?

public class P12HighlyDivisibleTriangularNumber {

	//check how many divisor a # has
	public static int DivisibleNum(Long a){
		int count = 1;
		long check = a/4;
		
		for (int i=1;i*i<a;i++){
			
			if(a%i==0){
				count+=2;
			}
			
			if (i>check && count < 200)break;
			
			if (count > 500){
				break;
			}
		}
		return count;
	}
	
	//generate triangle #, noticed a pattern 
	public static List<Long> generatedTriNum(){
		 
		List<Long> triNum = new ArrayList<>();
		triNum.add(0,(long) 1);
		triNum.add(1,(long) 3);
		
		for (int i=2;i<50000;i++){
		long diff = triNum.get(triNum.size()-1)-triNum.get(triNum.size()-2);
		long newTri = triNum.get(triNum.size()-1)+diff+1;
		triNum.add(i,newTri);
		}
		
		return new ArrayList<>(triNum);
	}
	
	public static void main(String[] args) {
		List<Long> data = generatedTriNum();
		
		for (int i=0;i<data.size();i++){
			if(data.get(i)%2==0){
				int temp = DivisibleNum(data.get(i));
				
				if(temp > 500){
					System.out.println("FOUND! #"+i+" "+data.get(i)+" has "+temp+" divisibles");
					break;
				}
				System.out.println("#"+i+" "+data.get(i)+" has "+temp+" divisibles");
			}
			
			
			
			
			
		}

	}

}
