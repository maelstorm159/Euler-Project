package EulerProjectFinished;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

//The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
//73167176531330624919225119674426574742355349194934
//96983520312774506326239578318016984801869478851843
//85861560789112949495459501737958331952853208805511
//12540698747158523863050715693290963295227443043557
//66896648950445244523161731856403098711121722383113
//62229893423380308135336276614282806444486645238749
//30358907296290491560440772390713810515859307960866
//70172427121883998797908792274921901699720888093776
//65727333001053367881220235421809751254540594752243
//52584907711670556013604839586446706324415722155397
//53697817977846174064955149290862569321978468622482
//83972241375657056057490261407972968652414535100474
//82166370484403199890008895243450658541227588666881
//16427171479924442928230863465674813919123162824586
//17866458359124566529476545682848912883142607690042
//24219022671055626321111109370544217506941658960408
//07198403850962455444362981230987879927244284909188
//84580156166097919133875499200524063689912560717606
//05886116467109405077541002256983155200055935729725
//71636269561882670428252483600823257530420752963450
//Find the thirteen adjacent digits in the 1000-digit number that 
//have the greatest product. What is the value of this product? 

class p_008LargestProductInASeries {
	
	public static void largestProduct(){
		String str = "73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966489504452445231617318564030987111217223831136222989342338030813533627661428280644448664523874930358907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397536978179778461740649551492908625693219784686224828397224137565705605749026140797296865241453510047482166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231628245861786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091888458015616609791913387549920052406368991256071760605886116467109405077541002256983155200055935729725716362695618826704282524836008232575304207529634";
		
		Double [] data = new Double [str.length()];
		List<Double> dataList = new ArrayList<>();
		
		for (int i=0;i<data.length;i++){
			int a = Character.getNumericValue(str.charAt(i));
			data[i] = (double) a;
		}
		
		for (int i=0;i<data.length-13;i++){
			double product = 1;
			for (int j=0;j<13;j++){
				product = product * data[i+j];
				dataList.add((double) product);
			}
		}
		
		Collections.sort(dataList);
		for (Double x:dataList){
			System.out.printf("%f",x);
			System.out.println();
		}
		
		
	}
	public static void main(String[] args) {
		largestProduct();

	}

}
